name: Build Binaries
on:
  push:
    branches:
      - master
  workflow_dispatch: 

jobs:     
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        os: [darwin, linux, windows]
        arch: [amd64]
        exclude:
          - os: windows
            arch: arm64
    env:
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}
    steps:
    - name: Copy Repository Contents
      uses: actions/checkout@master
      with:
        fetch-depth: 0 # get all tags
    - name: Build Binary
      id: binary
      run: ./_action_files/build.sh
    - name: delete tag if exists
      run: |
        tag_name="${{ matrix.os }}-${{ matrix.arch }}"
        if [ $(git tag -l "$tag_name") ]; then
          git tag -d "$tag_name"
          git push --delete origin "$tag_name"
        else
          echo "$tag_name does not exist"
        fi
    - name: delete existing release if exists
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |  
          github.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: "${{ matrix.os }}-${{ matrix.arch }}"
          }).then( (release) => {
              var rid = release.data.id
              github.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id:`${rid}`
              })
          }).catch((error) => {
               console.error(error);
          });
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ matrix.os }}-${{ matrix.arch }}
        release_name: ${{ matrix.os }}-${{ matrix.arch }}
        body: Binary for ${{ matrix.os }}-${{ matrix.arch }} build for ${{ github.sha }}.
    - name: Upload Release Asset
      id: upload
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ steps.binary.outputs.bin_path }}
        asset_name: hugo
        asset_content_type: application/unknown
    - name: Get Download URL
      run: echo ${{ steps.upload.browser_download_url }}
